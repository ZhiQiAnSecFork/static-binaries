stages:
  - prepare
  - build
  - pack

variables:
  alpine_base_image: "reg.git.brickburg.de/bbcontainers/hub/alpine:3"
  alpine_base_image_own: "$CI_REGISTRY_IMAGE/alpine_base_amd64:latest"

.tpl:docker:
  image: reg.git.brickburg.de/bbcontainers/hub/docker:stable
  tags:
    - docker

.tpl:stable:
  extends: .tpl:docker
  only:
    - master

.tpl:matrixbuild:
  extends: .tpl:stable
  parallel:
    matrix:
      - ARCH: 'x86'
        BASEIMAGE: reg.git.brickburg.de/bbcontainers/hub/i386/alpine:3
        OWNBASEIMAGE: "$CI_REGISTRY_IMAGE/alpine_base_x86:latest"
      - ARCH: 'amd64'
        BASEIMAGE: "$alpine_base_image"
        OWNBASEIMAGE: "$alpine_base_image_own"
      - ARCH: 'aarch64'
        BASEIMAGE: reg.git.brickburg.de/bbcontainers/hub/arm64v8/alpine:3
        OWNBASEIMAGE: "$CI_REGISTRY_IMAGE/alpine_base_aarch64:latest"
      - ARCH: 'armv7'
        BASEIMAGE: reg.git.brickburg.de/bbcontainers/hub/arm32v7/alpine:3
        OWNBASEIMAGE: "$CI_REGISTRY_IMAGE/alpine_base_armv7:latest"

.tpl:defaultalpinebuild:
  stage: build
  extends: .tpl:matrixbuild
  script:
    # build
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - cd src/$containerfolder
    - docker build -t "$uidimage" --build-arg ARCH=$ARCH --build-arg BASEIMAGE=$OWNBASEIMAGE .
    - cd ../../
    # extract binary
    - docker run -d --rm --name "$uidname" "$uidimage" /bin/sleep 300
    - sleep 3
    - docker cp $uidname:/dist .
    - docker stop $uidname
    - sleep 3
    - docker image rm "$uidimage"
  artifacts:
    paths:
      - dist/
  variables:
    uidimage: "staticbuild_${CI_JOB_ID}:latest"
    uidname: "staticbuild_${CI_JOB_ID}"

prepare:baseimages:
  stage: prepare
  extends: .tpl:matrixbuild
  script:
    - cd src/base-alpine
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t "$OWNBASEIMAGE" --build-arg BASEIMAGE=$BASEIMAGE .
    - docker push "$OWNBASEIMAGE"

build:busybox:
  stage: build
  extends: .tpl:defaultalpinebuild
  variables:
    containerfolder: busybox

build:tcpdump:
  stage: build
  extends: .tpl:defaultalpinebuild
  variables:
    containerfolder: tcpdump

build:curl:
  stage: build
  extends: .tpl:defaultalpinebuild
  variables:
    containerfolder: curl

build:vim:
  stage: build
  extends: .tpl:defaultalpinebuild
  variables:
    containerfolder: vim

build:iperf2:
  stage: build
  extends: .tpl:defaultalpinebuild
  variables:
    containerfolder: iperf2

build:iperf3:
  stage: build
  extends: .tpl:defaultalpinebuild
  variables:
    containerfolder: iperf3

pack:pack:
  stage: pack
  extends: .tpl:stable
  image: "$alpine_base_image_own"
  script:
    # create all-in-one package
    - cp -r dist serverless.industries-static-binaries
    - tar cvzf dist/all.tar.gz serverless.industries-static-binaries
    # create info.txt
    - cd dist
    - rm -f info.txt
    - |
      while read name; do

          md5=$(md5sum $name | awk '{print $2": md5sum: "$1}')
          sha1=$(sha1sum $name | awk '{print $2": sha1sum: "$1}')
          sha256=$(sha256sum $name | awk '{print $2": sha256sum: "$1}')
          sha512=$(sha512sum $name | awk '{print $2": sha512sum: "$1}')

          info=$(file $name)
          versionfile=".version-$(basename "$name")"

          if [ -f "$versionfile" ]; then
              echo "$name: $(cat "$versionfile")" >> info.txt
          fi

          echo "$info" >> info.txt
          echo "$md5" >> info.txt
          echo "$sha1" >> info.txt
          echo "$sha256" >> info.txt
          echo "$sha512" >> info.txt
          echo >> info.txt

      done <<< "$(find . -type f ! -iname '.version-*' | sort)"
    - cat info.txt
    - cd ..
    # upload
    - |
      lftp -d --norc <<EOF
      set ftp:ssl-force true
      open -u ${FTP_USER},${FTP_PASSWORD} ftp://${FTP_HOST}
      mirror --reverse --delete-first --delete dist/ $FTP_DIR
      exit
      EOF
